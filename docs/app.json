[{"name": "app.py", "content": "# --------------------------------------------\n# Imports\n# --------------------------------------------\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom faicons import icon_svg\nfrom collections import deque\nimport pandas as pd\nfrom shinywidgets import render_plotly\nimport plotly.graph_objects as go\nimport numpy as np\nimport requests\nfrom datetime import datetime, timedelta\n\n# --------------------------------------------\n# Shiney UI setup\n# --------------------------------------------\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Teja's Antarctic Explorer Dashboard\", class_=\"text-center\")\n\n    ui.p(\n        \"Simulated Real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n\n    ui.hr()\n\n    ui.h6(\"Links:\")\n\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/vnallam09/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n\n    ui.a(\n        \"GitHub App\",\n        href=\"https://github.com/vnallam09/cintel-05-cintel/blob/main/app.py\",\n        target=\"_blank\",\n    )\n\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\nui.h4(\"Weather Dashboard:\")\nwith ui.layout_columns():\n\n    @render.ui\n    def temp_value_box():\n        df, latest_dictionary_entry = reactive_calc_combined()\n        temp = latest_dictionary_entry[\"temp\"]\n\n        if temp > -16.5:\n            theme = \"bg-gradient-orange-red\"\n            icon_name = \"sun\"\n        elif temp < -17.5:\n            theme = \"bg-gradient-blue-purple\"\n            icon_name = \"snowflake\"\n        else:\n            theme = \"bg-gradient-indigo-purple\"\n            icon_name = \"thermometer\"\n\n        return ui.value_box(\n            title=\"Temperature\",\n            value=f\"{temp}\u00b0C\",\n            showcase=icon_svg(icon_name),\n            theme=theme,\n        )\n\n    @render.ui\n    def status_value_box():\n        df, latest_dictionary_entry = reactive_calc_combined()\n        temp = latest_dictionary_entry[\"temp\"]\n\n        if temp > -16.5:\n            status = \"Warm\"\n            theme = \"bg-gradient-red-orange\"\n            icon_name = \"sun\"\n        elif temp < -17.5:\n            status = \"Cold\"\n            theme = \"bg-gradient-blue-cyan\"\n            icon_name = \"snowflake\"\n        else:\n            status = \"Normal\"\n            theme = \"bg-gradient-green-blue\"\n            icon_name = \"thermometer\"\n\n        return ui.value_box(\n            title=\"Status\", value=status, showcase=icon_svg(icon_name), theme=theme\n        )\n\n    @render.ui\n    def time_box():\n        df, latest_dictionary_entry = reactive_calc_combined()\n        time = latest_dictionary_entry[\"timestamp\"]\n        theme = \"bg-gradient-indigo-purple\"\n        icon_name = \"clock\"\n\n        return ui.value_box(\n            title=\"Time\", value=time, showcase=icon_svg(icon_name), theme=theme\n        )\n\n    ui.value_box(\n        title=\"Location\",\n        value=\"Antarctica\",\n        showcase=icon_svg(\"map-pin\"),\n        theme=\"bg-gradient-purple-pink\",\n    )\n\nui.hr(\n    style=\"margin-top: 10px; margin-bottom: 10px;\"\n)  # Adds 10px of space above and below the line\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Latest Snapshot of last 5 temperature readings\")\n\n        @render.data_frame\n        def data_table():\n            df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option(\"display.width\", None)  # Use maximum width\n            return render.DataGrid(df, width=\"100%\")\n\n\nui.hr(\n    style=\"margin-top: 10px; margin-bottom: 10px;\"\n)  # Adds 10px of space above and below the line\n\nwith ui.card():\n    ui.card_header(\"Temperature Over Time\")\n\n    @render_plotly\n    def display_temperature_plot():\n        df, latest_dictionary_entry = reactive_calc_combined()\n        if not df.empty:\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n            fig = go.Figure()\n\n            # Temperature line\n            fig.add_trace(\n                go.Scatter(\n                    x=df[\"timestamp\"],\n                    y=df[\"temp\"],\n                    mode=\"lines+markers\",\n                    name=\"Temperature\",\n                    line=dict(color=\"#2980B9\"),\n                )\n            )\n\n            # Simple trend line\n            if len(df) >= 2:\n                x_numeric = np.arange(len(df))\n                z = np.polyfit(x_numeric, df[\"temp\"], 1)\n                trend_y = np.polyval(z, x_numeric)\n\n                fig.add_trace(\n                    go.Scatter(\n                        x=df[\"timestamp\"],\n                        y=trend_y,\n                        mode=\"lines\",\n                        name=\"Trend\",\n                        line=dict(color=\"#85C1E9\", dash=\"dash\"),\n                    )\n                )\n\n            fig.update_layout(\n                xaxis_title=\"Time\",\n                yaxis_title=\"Temperature (\u00b0C)\",\n                plot_bgcolor=\"#F8FBFF\",\n                paper_bgcolor=\"#EBF5FB\",\n                font=dict(color=\"#1B4F72\"),\n                title_font=dict(size=20),\n                transition=dict(duration=500),\n            )\n            return fig\n\n\nui.hr(style=\"margin-top: 10px; margin-bottom: 10px;\")\n\nwith ui.card():\n    ui.card_header(\"Temperature real time from Antarctica\")\n    @render_plotly\n    def current_display_temperature_plot():\n        df = fetch_weather_data(-82.86, 0.0000, 100) #antarctic coordinates\n        \n        fig = go.Figure()\n        \n        # Temperature line 2m\n        fig.add_trace(go.Scatter(\n            x=df[\"date\"],\n            y=df[\"temperature_2m\"],\n            mode=\"lines+markers\",\n            name=\"temperature_2m\",\n            line=dict(color=\"#2980B9\"),\n        ))\n        # apparent_temperature line 2m\n        fig.add_trace(go.Scatter(\n            x=df[\"date\"],\n            y=df[\"apparent_temperature\"],\n            mode=\"lines+markers\",\n            name=\"apparent_temperature\",\n            line=dict(color=\"#1B4F72\"),\n        ))\n        \n        fig.update_layout(\n            xaxis_title=\"Time\",\n            yaxis_title=\"Temperature (\u00b0C)\",\n            plot_bgcolor=\"#F8FBFF\",\n            paper_bgcolor=\"#EBF5FB\",\n            font=dict(color=\"#1B4F72\"),\n            title_font=dict(size=20),\n            transition=dict(duration=500)\n        )\n        return fig\n\nwith ui.layout_columns():\n    with ui.card():\n        ui.card_header(\"Snowfall vs Time\")\n        @render_plotly\n        def snowfall():\n            df = fetch_weather_data(-82.86, 0.0000, 100)\n            \n            fig = go.Figure()\n            \n            fig.add_trace(go.Scatter(\n                x=df[\"date\"],\n                y=df[\"snowfall\"],\n                mode=\"lines+markers\",\n                name=\"Snowfall\",\n                line=dict(color=\"#2980B9\", width=2),\n                marker=dict(color=\"#1B4F72\", size=4),\n                fill='tozeroy',\n                fillcolor='rgba(41, 128, 185, 0.1)'\n            ))\n            \n            fig.update_layout(\n                xaxis_title=\"Date\",\n                yaxis_title=\"Snowfall (cm)\",\n                plot_bgcolor=\"#F8FBFF\",\n                paper_bgcolor=\"#EBF5FB\",\n                font=dict(color=\"#1B4F72\"),\n                title_font=dict(size=16),\n                showlegend=False,\n                transition=dict(duration=500),\n                hovermode='x unified'\n            )\n            return fig\n\n    with ui.card():\n        ui.card_header(\"Snow Depth vs Time\")\n        @render_plotly\n        def snow_depth():\n            df = fetch_weather_data(-82.86, 0.0000, 100)\n            \n            fig = go.Figure()\n            \n            fig.add_trace(go.Scatter(\n                x=df[\"date\"],\n                y=df[\"snow_depth\"],\n                mode=\"lines+markers\",\n                name=\"Snow Depth\",\n                line=dict(color=\"#27AE60\", width=2),\n                marker=dict(color=\"#1E8449\", size=4),\n                fill='tozeroy',\n                fillcolor='rgba(39, 174, 96, 0.1)'\n            ))\n            \n            # Add reference line for average\n            avg_depth = df[\"snow_depth\"].mean()\n            fig.add_hline(\n                y=avg_depth, \n                line_dash=\"dash\", \n                line_color=\"#E74C3C\",\n                annotation_text=f\"Average: {avg_depth:.1f} cm\"\n            )\n            \n            fig.update_layout(\n                xaxis_title=\"Date\",\n                yaxis_title=\"Snow Depth (cm)\",\n                plot_bgcolor=\"#F8FBFF\",\n                paper_bgcolor=\"#EBF5FB\",\n                font=dict(color=\"#1B4F72\"),\n                title_font=dict(size=16),\n                showlegend=False,\n                transition=dict(duration=500),\n                hovermode='x unified'\n            )\n            return fig\n\n# --------------------------------------------\n# Constants and reactive data setup\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 5\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    latest_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # getting 5 data points for plotting\n    reactive_value_wrapper.get().append(latest_dictionary_entry)\n    deque_snapshot = reactive_value_wrapper.get()\n\n    df = pd.DataFrame(deque_snapshot)\n\n    return df, latest_dictionary_entry\n\n\n# --------------------------------------------\n# Fetching weather data from Open Meteo API \n# https://open-meteo.com/en/docs?timezone=auto#location_and_time\n# --------------------------------------------\n\ndef fetch_weather_data(latitude, longitude, days):\n    end_date = datetime.now().date()\n    start_date = end_date - timedelta(days=days - 1)\n\n    url = \"https://archive-api.open-meteo.com/v1/archive\"\n\n    params = {\n        \"latitude\": latitude,\n        \"longitude\": longitude,\n        \"start_date\": start_date.strftime(\"%Y-%m-%d\"),\n        \"end_date\": end_date.strftime(\"%Y-%m-%d\"),\n        \"daily\": [\n            \"temperature_2m_mean\",\n            \"apparent_temperature_mean\",\n            \"snowfall_sum\",\n            \"snow_depth_mean\",\n        ],\n        \"timezone\": \"auto\",\n    }\n\n    response = requests.get(url, params=params)\n    data = response.json()\n    daily_data = data[\"daily\"]\n\n    df = pd.DataFrame(\n        {\n            \"date\": pd.to_datetime(daily_data[\"time\"]),\n            \"temperature_2m\": daily_data[\"temperature_2m_mean\"],\n            \"apparent_temperature\": daily_data[\"apparent_temperature_mean\"],\n            \"snowfall\": daily_data[\"snowfall_sum\"],\n            \"snow_depth\": daily_data[\"snow_depth_mean\"],\n        }\n    )\n    df['date'] = pd.to_datetime(df['date'])\n    \n    return df\n", "type": "text"}]